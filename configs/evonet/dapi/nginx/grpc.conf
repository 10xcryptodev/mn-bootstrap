log_format grpc_json escape=json '{"timestamp":"$time_iso8601","client":"$remote_addr",'
                                  '"uri":"$uri","http-status":$status,'
                                  '"grpc-status":$grpc_status,"upstream":"$upstream_addr"'
                                  '"rx-bytes":$request_length,"tx-bytes":$bytes_sent}';

map $upstream_trailer_grpc_status $grpc_status {
    default $upstream_trailer_grpc_status; # We normally expect to receive
                                           # grpc-status as a trailer
    ''      $sent_http_grpc_status;        # Else use the header, regardless of
                                           # who generated it
}

server {
    listen 50051 http2;
    listen 1443 ssl http2;
    listen [::]:1443 ssl http2;

    server_name 161.35.234.58;

    ssl on;
    ssl_certificate /etc/ssl/bundle.crt;
    ssl_certificate_key /etc/ssl/private.key;

    ssl_protocols TLSv1.2 TLSv1.3;

    access_log /dev/stdout grpc_json;

    limit_req zone=protect_api burst=300 nodelay;
    limit_req_status 429;

    location /org.dash.platform.dapi.v0.Core {
        grpc_pass grpc://dapi_api:3005;
    }

    location /org.dash.platform.dapi.v0.Platform {
        grpc_pass grpc://dapi_api:3005;
    }

    location /org.dash.platform.dapi.v0.TransactionsFilterStream {
        grpc_pass grpc://dapi_tx_filter_stream:3006;
    }

    location /grpc.health.v1.Health {
        grpc_pass grpc://dapi_tx_filter_stream:3006;
    }

    # Error responses
    include /etc/nginx/conf.d/errors.grpc_conf; # gRPC-compliant error responses
    default_type application/grpc;   # Ensure gRPC for all error responses
}
